__int64 __fastcall sub_7FF6EBBA14A9()
{
  unsigned int v0; // ebp
  unsigned int v1; // r12d
  __int64 v2; // rbx
  __int64 v3; // rsi
  __int64 v4; // r15
  __int64 v5; // r14
  unsigned __int8 v6; // al
  int v7; // edx
  char v8; // dl
  bool v9; // r15
  _QWORD *v10; // r14
  void *v11; // rdi
  char v12; // bl
  void *v13; // rdx
  void *v14; // r15
  __int64 v15; // rdi
  __int64 v16; // rbx
  __int64 v17; // rsi
  unsigned __int8 v18; // al
  unsigned __int8 v19; // dl
  char *Buffer; // r14
  unsigned __int64 v21; // r15
  unsigned __int64 v22; // r12
  char v23; // al
  void *v24; // rdx
  void *v25; // r13
  __int64 v26; // rax
  char v27; // r14
  ULONG Length; // eax
  int File; // eax
  char v30; // al
  unsigned __int64 v31; // rdx
  char v32; // al
  unsigned __int64 v33; // rdx
  char v34; // al
  char v35; // al
  unsigned __int64 v36; // rdx
  char v37; // cl
  __int64 v38; // rdx
  unsigned __int64 v39; // r15
  unsigned __int64 i; // r12
  unsigned __int64 v41; // r13
  char v42; // al
  unsigned __int64 v43; // rdx
  char v44; // al
  __int64 v45; // rdx
  __int64 v46; // rax
  unsigned __int64 v47; // r12
  unsigned __int64 v48; // r12
  unsigned __int8 *v49; // rsi
  __int64 v50; // rbx
  char v51; // di
  unsigned __int8 *v52; // rbx
  unsigned __int8 *v53; // r15
  unsigned __int8 *v54; // rdx
  unsigned __int8 *v55; // rdi
  __int64 v56; // rcx
  unsigned __int8 *v57; // r14
  int v58; // eax
  int v59; // r9d
  int v60; // r8d
  char v61; // al
  unsigned __int8 *v62; // r12
  unsigned __int8 *v63; // r13
  __int64 v64; // rcx
  char v65; // al
  char v66; // dl
  int v67; // edx
  int v68; // eax
  unsigned __int8 *v69; // r12
  unsigned __int8 *v70; // rdi
  unsigned __int64 v71; // rax
  __int64 v72; // rcx
  bool v73; // zf
  char **v74; // rax
  __int64 v76; // [rsp+48h] [rbp-2110h]
  __int64 v77; // [rsp+48h] [rbp-2110h]
  unsigned __int64 v78; // [rsp+50h] [rbp-2108h]
  _QWORD v79[2]; // [rsp+58h] [rbp-2100h] BYREF
  _QWORD *v80; // [rsp+68h] [rbp-20F0h] BYREF
  __int64 v81; // [rsp+70h] [rbp-20E8h]
  __int64 v82; // [rsp+78h] [rbp-20E0h]
  unsigned int v83; // [rsp+B4h] [rbp-20A4h]
  unsigned int v84; // [rsp+B8h] [rbp-20A0h]
  _QWORD v85[2]; // [rsp+C0h] [rbp-2098h] BYREF
  _QWORD v86[2]; // [rsp+D0h] [rbp-2088h] BYREF
  _QWORD v87[2]; // [rsp+E0h] [rbp-2078h] BYREF
  _QWORD v88[2]; // [rsp+F0h] [rbp-2068h] BYREF
  _BYTE IoStatusBlock[24]; // [rsp+100h] [rbp-2058h] BYREF
  __int64 v90; // [rsp+118h] [rbp-2040h]
  __int64 v91; // [rsp+120h] [rbp-2038h]
  unsigned int v92; // [rsp+14Ch] [rbp-200Ch]
  unsigned int v93; // [rsp+150h] [rbp-2008h]

  v88[0] = &unk_7FF6EBBA6360;
  v88[1] = 149LL;
  v85[0] = &unk_7FF6EBBA63F5;
  v86[0] = &unk_7FF6EBBA645F;
  v80 = v88;
  v81 = (__int64)sub_7FF6EBBA117E;
  *(_QWORD *)IoStatusBlock = &unk_7FF6EBBA6498;
  *(_QWORD *)&IoStatusBlock[8] = 2LL;
  v91 = 0LL;
  v85[1] = 106LL;
  v86[1] = 17LL;
  *(_QWORD *)&IoStatusBlock[16] = &v80;
  v90 = 1LL;
  sub_7FF6EBBA3E21();
  sub_7FF6EBBA43A9(IoStatusBlock, "b87a5dae3a3686ddd6f14ebcb4f4d49bIncorrect! The flag is not: ");
  v2 = *(_QWORD *)IoStatusBlock;
  v3 = *(_QWORD *)&IoStatusBlock[8];
  if ( __OFSUB__(-*(_QWORD *)IoStatusBlock, 1LL) )
  {
LABEL_10:
    *(_DWORD *)IoStatusBlock = 0;
    LODWORD(v91) = 16777472;
    v90 = 7LL;
    *(_OWORD *)&IoStatusBlock[8] = 0LL;
    WORD2(v91) = 1;
    sub_7FF6EBBA43A9(&v80, "b87a5dae3a3686ddd6f14ebcb4f4d49bIncorrect! The flag is not: ");
    v10 = v80;
    v11 = (void *)v81;
    if ( v80 == (_QWORD *)0x8000000000000000LL )
    {
      v12 = 1;
    }
    else
    {
      v12 = sub_7FF6EBBA2B12(v81, IoStatusBlock);
      v14 = v13;
      sub_7FF6EBBA4189(v10, v11);
      v11 = v14;
    }
    if ( (v12 & 1) != 0 )
      goto LABEL_148;
    CloseHandle(v11);
    if ( (v3 & 3) == 1 )
    {
      v15 = *(_QWORD *)(v3 - 1);
      v16 = *(_QWORD *)(v3 + 7);
      if ( *(_QWORD *)v16 )
        (*(void (__fastcall **)(_QWORD))v16)(*(_QWORD *)(v3 - 1));
      v17 = v3 - 1;
      if ( *(_QWORD *)(v16 + 8) )
        sub_7FF6EBBA2130(v15, *(_QWORD *)(v16 + 16));
      sub_7FF6EBBA2130(v17, 8LL);
    }
    goto LABEL_22;
  }
  sub_7FF6EBBA2D59(&v80, *(_QWORD *)&IoStatusBlock[8], 0LL);
  LODWORD(v4) = (_DWORD)v80;
  v5 = v81;
  if ( v80 == (_QWORD *)2 && (v6 = sub_7FF6EBBA2CB4(v81), ((v7 == 1920) & v6) != 0) )
  {
    sub_7FF6EBBA2D59(IoStatusBlock, v3, 0x200000LL);
    v4 = *(_QWORD *)IoStatusBlock;
    if ( *(_QWORD *)IoStatusBlock == 2LL || (v1 = v92, v0 = v93, sub_7FF6EBBA2D45(v92, v93), (v8 & 1) != 0) )
    {
      sub_7FF6EBBA300A(v4);
      v9 = 1;
      goto LABEL_9;
    }
    v77 = *(_QWORD *)&IoStatusBlock[8];
    sub_7FF6EBBA300A(v4);
    sub_7FF6EBBA2CD4(v5);
    v5 = v77;
  }
  else
  {
    v1 = v83;
    v0 = v84;
  }
  v9 = (_DWORD)v4 == 2;
LABEL_9:
  sub_7FF6EBBA4189(v2, v3);
  v3 = v5;
  if ( v9 )
    goto LABEL_10;
  v18 = sub_7FF6EBBA2D45(v1, v0);
  if ( ((v18 | v19) & 1) == 0 )
  {
    v80 = v85;
    *(_QWORD *)IoStatusBlock = &unk_7FF6EBBA6498;
    *(_QWORD *)&IoStatusBlock[8] = 2LL;
    v91 = 0LL;
    v81 = (__int64)sub_7FF6EBBA1286;
    *(_QWORD *)&IoStatusBlock[16] = &v80;
    v90 = 1LL;
    sub_7FF6EBBA3E21();
  }
LABEL_22:
  v80 = v86;
  *(_QWORD *)IoStatusBlock = &unk_7FF6EBBA6498;
  *(_QWORD *)&IoStatusBlock[8] = 2LL;
  v91 = 0LL;
  v81 = (__int64)sub_7FF6EBBA138E;
  *(_QWORD *)&IoStatusBlock[16] = &v80;
  v90 = 1LL;
  sub_7FF6EBBA3E21();
  v80 = 0LL;
  v81 = 1LL;
  v82 = 0LL;
  if ( dword_7FF6EBBA80D8 != 3 )
  {
    *(_QWORD *)IoStatusBlock = &byte_7FF6EBBA80A0;
    *(_QWORD *)&IoStatusBlock[8] = v79;
    v87[0] = IoStatusBlock;
    sub_7FF6EBBA5731(&dword_7FF6EBBA80D8, 1, (__int64)v87, (__int64)&unk_7FF6EBBA6698);
  }
  if ( _InterlockedCompareExchange8(&byte_7FF6EBBA80A0, 1, 0) )
    sub_7FF6EBBA5882(&byte_7FF6EBBA80A0);
  v76 = v82;
  while ( 1 )
  {
    while ( 1 )
    {
      Buffer = (char *)lpMultiByteStr;
      v21 = qword_7FF6EBBA80C0 - qword_7FF6EBBA80B8;
      if ( qword_7FF6EBBA80C0 > (unsigned __int64)qword_7FF6EBBA80B8 )
        break;
      v22 = *(_QWORD *)&cbMultiByte;
      memset((char *)lpMultiByteStr + qword_7FF6EBBA80C8, 0, *(_QWORD *)&cbMultiByte - qword_7FF6EBBA80C8);
      v23 = sub_7FF6EBBA30BA(4294967286LL);
      v25 = v24;
      if ( (v23 & 1) != 0 )
        goto LABEL_52;
      if ( !(unsigned __int8)sub_7FF6EBBA3101(v24) )
      {
        *(_OWORD *)IoStatusBlock = xmmword_7FF6EBBA6710;
        Length = -1;
        if ( v22 < 0xFFFFFFFF )
          Length = v22;
        File = NtReadFile(v25, 0LL, 0LL, 0LL, (PIO_STATUS_BLOCK)IoStatusBlock, Buffer, Length, 0LL, 0LL);
        if ( File == 259 )
        {
          WaitForSingleObject(v25, 0xFFFFFFFF);
          File = *(_DWORD *)IoStatusBlock;
        }
        if ( File == -1073741807 )
        {
LABEL_40:
          v21 = 0LL;
        }
        else
        {
          if ( File == 259 )
            __fastfail(7u);
          if ( File < 0 )
          {
            v21 = ((unsigned __int64)RtlNtStatusToDosError(File) << 32) | 2;
            sub_7FF6EBBA3067(IoStatusBlock, v21);
            switch ( IoStatusBlock[0] )
            {
              case 0:
                if ( *(_DWORD *)&IoStatusBlock[4] == 232 || *(_DWORD *)&IoStatusBlock[4] == 109 )
                  goto LABEL_101;
                v34 = 1;
                goto LABEL_50;
              case 1:
                v37 = IoStatusBlock[1];
                goto LABEL_100;
              case 2:
              case 3:
                v37 = *(_BYTE *)(*(_QWORD *)&IoStatusBlock[8] + 16LL);
LABEL_100:
                v34 = 1;
                if ( v37 != 11 )
                  goto LABEL_50;
LABEL_101:
                sub_7FF6EBBA2CD4(v21);
                break;
            }
            goto LABEL_40;
          }
          v21 = *(_QWORD *)&IoStatusBlock[8];
        }
        v34 = 0;
LABEL_50:
        if ( (v34 & 1) == 0 )
          goto LABEL_66;
        goto LABEL_51;
      }
      v26 = sub_7FF6EBBA36AE(MultiByteStr, Buffer);
      if ( v22 == v26 )
      {
        v21 = v22;
        v25 = 0LL;
        goto LABEL_68;
      }
      v78 = v26;
      if ( v22 - v26 >= 4 )
      {
        v35 = sub_7FF6EBBA3716(v25, (__int64)&unk_7FF6EBBA80D0);
        v21 = v36;
        if ( (v35 & 1) != 0 )
        {
          v34 = 1;
        }
        else
        {
          if ( v36 >= 0x1001 )
            goto LABEL_148;
          v34 = sub_7FF6EBBA3868((LPCWCH)IoStatusBlock, v36, Buffer, v22);
          v39 = v78;
          if ( (v34 & 1) != 0 )
            v39 = 0LL;
          v21 = v38 + v39;
        }
        goto LABEL_50;
      }
      *(_WORD *)IoStatusBlock = 0;
      v30 = sub_7FF6EBBA3716(v25, (__int64)&unk_7FF6EBBA80D0);
      v21 = v31;
      if ( (v30 & 1) == 0 )
      {
        if ( v31 >= 2 )
          goto LABEL_148;
        v32 = sub_7FF6EBBA3868((LPCWCH)IoStatusBlock, v31, MultiByteStr, 4);
        v21 = v33;
        if ( (v32 & 1) == 0 )
        {
          byte_7FF6EBBA80D6 = v33;
          if ( v22 < v78 )
            goto LABEL_148;
          v21 = v78 + sub_7FF6EBBA36AE(MultiByteStr, &Buffer[v78]);
LABEL_66:
          if ( v21 > v22 )
            goto LABEL_148;
          goto LABEL_67;
        }
      }
LABEL_51:
      v25 = (void *)v21;
      if ( v21 )
      {
LABEL_52:
        if ( !(unsigned __int8)sub_7FF6EBBA38BF(v25) )
        {
          v21 = 0LL;
          goto LABEL_68;
        }
        sub_7FF6EBBA3B2A(v25);
      }
      v21 = 0LL;
LABEL_67:
      v25 = 0LL;
LABEL_68:
      qword_7FF6EBBA80B8 = 0LL;
      qword_7FF6EBBA80C0 = v21;
      qword_7FF6EBBA80C8 = v22;
      if ( !v25 )
        goto LABEL_72;
      v27 = 1;
      v21 = (unsigned __int64)v25;
      switch ( (unsigned __int8)v25 & 3 )
      {
        case 0:
LABEL_70:
          if ( *(_BYTE *)(v21 + 16) == 35 )
            goto LABEL_83;
          goto LABEL_108;
        case 1:
LABEL_80:
          if ( *(_BYTE *)(v21 + 15) == 35 )
            goto LABEL_83;
          goto LABEL_108;
        case 2:
          goto LABEL_109;
        case 3:
LABEL_82:
          if ( (unsigned __int8)sub_7FF6EBBA2D39(HIDWORD(v21)) != 35 )
          {
LABEL_108:
            v27 = 1;
            goto LABEL_109;
          }
LABEL_83:
          sub_7FF6EBBA2CD4(v21);
          break;
      }
    }
    if ( !lpMultiByteStr )
    {
      v27 = 1;
      switch ( v21 & 3 )
      {
        case 0uLL:
          goto LABEL_70;
        case 1uLL:
          goto LABEL_80;
        case 2uLL:
          goto LABEL_109;
        case 3uLL:
          goto LABEL_82;
      }
    }
    Buffer = (char *)lpMultiByteStr + qword_7FF6EBBA80B8;
LABEL_72:
    if ( v21 > 0xF )
    {
      v41 = ((unsigned __int64)(Buffer + 7) & 0xFFFFFFFFFFFFFFF8uLL) - (_QWORD)Buffer;
      if ( v41 )
      {
        v42 = sub_7FF6EBBA2ACB(Buffer, v41);
        if ( (v42 & 1) != 0 )
        {
          i = v43;
          goto LABEL_91;
        }
      }
      else
      {
        v41 = 0LL;
      }
      while ( v41 <= v21 - 16
           && ((*(_QWORD *)&Buffer[v41 + 8] ^ 0xA0A0A0A0A0A0A0ALL | (0x101010101010100LL
                                                                   - (*(_QWORD *)&Buffer[v41 + 8] ^ 0xA0A0A0A0A0A0A0ALL))) & (*(_QWORD *)&Buffer[v41] | (0x101010101010100LL - (*(_QWORD *)&Buffer[v41] ^ 0xA0A0A0A0A0A0A0ALL))) & 0x8080808080808080uLL) == 0x8080808080808080uLL )
        v41 += 16LL;
      v44 = sub_7FF6EBBA2ACB(&Buffer[v41], v21 - v41);
      i = v41 + v45;
      v42 = v44 & 1;
    }
    else
    {
      for ( i = 0LL; ; ++i )
      {
        if ( v21 == i )
        {
          i = v21;
          v42 = 0;
          goto LABEL_91;
        }
        if ( Buffer[i] == 10 )
          break;
      }
      v42 = 1;
    }
LABEL_91:
    if ( (v42 & 1) != 0 )
      break;
    sub_7FF6EBBA215C(&v80, Buffer, v21);
    v46 = v21 + qword_7FF6EBBA80B8;
    if ( qword_7FF6EBBA80C0 < v21 + qword_7FF6EBBA80B8 )
      v46 = qword_7FF6EBBA80C0;
    qword_7FF6EBBA80B8 = v46;
    if ( !v21 )
      goto LABEL_107;
  }
  if ( i == -1LL || i >= v21 )
    goto LABEL_148;
  v47 = i + 1;
  sub_7FF6EBBA215C(&v80, Buffer, v47);
  v48 = qword_7FF6EBBA80B8 + v47;
  if ( qword_7FF6EBBA80C0 < v48 )
    v48 = qword_7FF6EBBA80C0;
  qword_7FF6EBBA80B8 = v48;
LABEL_107:
  v27 = 0;
LABEL_109:
  v49 = (unsigned __int8 *)v81;
  v50 = v82;
  sub_7FF6EBBA28F1(IoStatusBlock, v81 + v76, v82 - v76);
  v51 = IoStatusBlock[0];
  if ( IoStatusBlock[0] )
    v50 = v76;
  v82 = v50;
  sub_7FF6EBBA3B86(&byte_7FF6EBBA80A0);
  if ( (v51 & 1) != 0 || v27 )
LABEL_148:
    BUG();
  v52 = &v49[v50];
  v53 = 0LL;
  v54 = v49;
  do
  {
    v55 = v53;
    if ( v54 == v52 )
    {
      v57 = v52;
LABEL_126:
      v62 = 0LL;
      v55 = 0LL;
      break;
    }
    v56 = *v54;
    if ( (v56 & 0x80u) != 0LL )
    {
      v58 = v56 & 0x1F;
      v59 = v54[1] & 0x3F;
      if ( (unsigned __int8)v56 <= 0xDFu )
      {
        v57 = v54 + 2;
        v56 = v59 | (unsigned int)(v58 << 6);
      }
      else
      {
        v60 = (v59 << 6) | v54[2] & 0x3F;
        if ( (unsigned __int8)v56 < 0xF0u )
        {
          v57 = v54 + 3;
          v56 = (v58 << 12) | (unsigned int)v60;
        }
        else
        {
          v57 = v54 + 4;
          v56 = ((v56 & 7) << 18) | (v60 << 6) | v54[3] & 0x3Fu;
          if ( (_DWORD)v56 == 1114112 )
            goto LABEL_126;
        }
      }
    }
    else
    {
      v57 = v54 + 1;
    }
    v53 += v57 - v54;
    v61 = sub_7FF6EBBA1028(v56);
    v54 = v57;
    v62 = v53;
  }
  while ( v61 );
  while ( v57 != v52 )
  {
    v63 = v52;
    v64 = (unsigned int)(char)*(v52 - 1);
    if ( (int)v64 < 0 )
    {
      v65 = *(v52 - 2);
      if ( v65 >= -64 )
      {
        v52 -= 2;
        v68 = v65 & 0x1F;
      }
      else
      {
        v66 = *(v52 - 3);
        if ( v66 >= -64 )
        {
          v52 -= 3;
          v67 = v66 & 0xF;
        }
        else
        {
          v52 -= 4;
          v67 = ((*(v63 - 4) & 7) << 6) | v66 & 0x3F;
        }
        v68 = (v67 << 6) | v65 & 0x3F;
      }
      v64 = (v68 << 6) | (unsigned int)(v64 & 0x3F);
      if ( (_DWORD)v64 == 1114112 )
        break;
    }
    else
    {
      --v52;
    }
    if ( !(unsigned __int8)sub_7FF6EBBA1028(v64) )
    {
      v62 = &v63[v53 - v57];
      break;
    }
  }
  v69 = (unsigned __int8 *)(v62 - v55);
  v70 = &v55[(_QWORD)v49];
  v79[0] = v70;
  v79[1] = v69;
  if ( v69 == (unsigned __int8 *)38 )
  {
    v71 = 0xDFB432BC61353FB0uLL;
    v72 = 0LL;
    while ( v72 != 38 )
    {
      v71 = 0xCFA8C7711A026A35uLL - 0x453E9537620FF1E3LL * v71;
      v73 = (v70[v72] ^ (unsigned __int8)((unsigned int)v71 >> 21)) == byte_7FF6EBBA6470[v72];
      ++v72;
      if ( !v73 )
        goto LABEL_143;
    }
    v87[0] = v79;
    v74 = &off_7FF6EBBA6530;
  }
  else
  {
LABEL_143:
    v87[0] = v79;
    v74 = (char **)&off_7FF6EBBA64F8;
  }
  *(_QWORD *)IoStatusBlock = v74;
  *(_QWORD *)&IoStatusBlock[8] = 2LL;
  v91 = 0LL;
  v87[1] = sub_7FF6EBBA28DF;
  *(_QWORD *)&IoStatusBlock[16] = v87;
  v90 = 1LL;
  sub_7FF6EBBA3E21(); // the same flag which gave me the text "enter the flag", now i think validates it, because of flag is not true it prompts that its not the flag
  return sub_7FF6EBBA22C2(v80, v49);
}


__int64 __fastcall sub_7FF6EBBA3E21(__int64 a1)
{
  __int64 v2; // rdi
  int v3; // eax
  char v4; // al
  char *v5; // rsi
  __int64 result; // rax
  char v7; // [rsp+2Fh] [rbp-29h] BYREF
  __int64 *v8; // [rsp+30h] [rbp-28h] BYREF
  __int64 *v9; // [rsp+38h] [rbp-20h] BYREF
  char *v10; // [rsp+40h] [rbp-18h]

  if ( dword_7FF6EBBA8118 != 3 )
  {
    v9 = &qword_7FF6EBBA80E0;
    v10 = &v7;
    v8 = (__int64 *)&v9;
    sub_7FF6EBBA5731(&dword_7FF6EBBA8118, 1, (__int64)&v8, (__int64)&unk_7FF6EBBA66E8);
  }
  v2 = sub_7FF6EBBA40DA();
  if ( v2 == qword_7FF6EBBA80E0 )
  {
    if ( dword_7FF6EBBA80E8 == -1 )
      goto LABEL_14;
    v3 = dword_7FF6EBBA80E8 + 1;
  }
  else
  {
    if ( _InterlockedCompareExchange8(&byte_7FF6EBBA80EC, 1, 0) )
      sub_7FF6EBBA5882(&byte_7FF6EBBA80EC);
    qword_7FF6EBBA80E0 = v2;
    v3 = 1;
  }
  dword_7FF6EBBA80E8 = v3;
  v8 = &qword_7FF6EBBA80E0;
  v9 = (__int64 *)&v8;
  v10 = 0LL;
  v4 = sub_7FF6EBBA23AB(&v9, &off_7FF6EBBA6878, a1);
  v5 = v10;
  if ( v4 )
  {
    if ( !v10 )
LABEL_14:
      BUG();
  }
  else
  {
    sub_7FF6EBBA3A41(v10);
    v5 = 0LL;
  }
  result = sub_7FF6EBBA3C50(v8);
  if ( v5 )
    goto LABEL_14;
  return result;
}






















__int64 __fastcall sub_7FF6EBBA3716
(
        HANDLE hConsoleInput,
        _WORD *a2,
        unsigned __int64 a3,
        unsigned __int64 a4,
        __int16 *a5)
{
  unsigned __int64 v5; // rbx
  __int16 v7; // ax
  __int64 v8; // rax
  unsigned __int64 v9; // rbx
  _WORD *v10; // r15
  DWORD v11; // eax
  __int64 v12; // rdx
  __int64 v13; // rdx
  DWORD NumberOfCharsRead; // [rsp+2Ch] [rbp-6Ch] BYREF
  unsigned __int64 v16; // [rsp+30h] [rbp-68h]
  _WORD *v17; // [rsp+38h] [rbp-60h]
  __int64 v18; // [rsp+40h] [rbp-58h]
  struct _CONSOLE_READCONSOLE_CONTROL pInputControl; // [rsp+48h] [rbp-50h] BYREF

  v5 = a4;
  v7 = *a5;
  if ( *a5 )
  {
    *a5 = 0;
    *a2 = v7;
    if ( a4 == 1 )
      v5 = 2LL;
    v8 = 1LL;
    if ( !v5 )
      goto LABEL_22;
  }
  else
  {
    v8 = 0LL;
  }
  v16 = a3;
  if ( v5 > a3 )
    goto LABEL_22;
  v9 = v5 - v8;
  v17 = a2;
  v18 = v8;
  v10 = &a2[v8];
  NumberOfCharsRead = 0;
  pInputControl = (struct _CONSOLE_READCONSOLE_CONTROL)xmmword_7FF6EBBA6340;
  do
  {
    SetLastError(0);
    if ( !ReadConsoleW(hConsoleInput, v10, v9, &NumberOfCharsRead, &pInputControl) )
    {
      sub_7FF6EBBA3996();
      return 1LL;
    }
    v11 = NumberOfCharsRead;
    if ( NumberOfCharsRead )
      goto LABEL_13;
  }
  while ( GetLastError() == 995 );
  v11 = NumberOfCharsRead;
  if ( NumberOfCharsRead )
  {
LABEL_13:
    if ( (unsigned __int64)v11 - 1 < v9 )
    {
      v12 = v11 - (v10[v11 - 1] == 26);
      goto LABEL_15;
    }
LABEL_22:
    BUG();
  }
  v12 = 0LL;
LABEL_15:
  v13 = v18 + v12;
  if ( v13 )
  {
    if ( v13 - 1 >= v16 )
      goto LABEL_22;
    if ( (v17[v13 - 1] & 0xFC00) == 0xD800 )
      *a5 = v17[v13 - 1];
  }
  return 0LL;
}



char __fastcall sub_7FF6EBBA23AB(__int64 a1, __int64 a2, __int64 *a3)
{
  __int64 v3; // r14
  __int64 v4; // rax
  __int64 v5; // r15
  __int64 v6; // rsi
  __int64 v7; // rdi
  __int64 v8; // r13
  _QWORD *v9; // r12
  __int16 v10; // bp
  __int16 v11; // ax
  __int64 v12; // r8
  __int64 v13; // r14
  unsigned __int64 v14; // r13
  __int64 v15; // rbx
  char v16; // al
  char result; // al
  char v18; // cl
  __int64 v19; // [rsp+20h] [rbp-68h] BYREF
  __int64 v20; // [rsp+28h] [rbp-60h]
  __int64 v21; // [rsp+30h] [rbp-58h]
  unsigned __int64 v22; // [rsp+38h] [rbp-50h]
  __int64 v23; // [rsp+40h] [rbp-48h]

  v21 = 3758096416LL;
  v19 = a1;
  v20 = a2;
  v3 = a3[4];
  if ( v3 )
  {
    v4 = a3[5];
    v5 = *a3;
    v22 = a3[1];
    v6 = a3[2];
    v7 = a3[3];
    v23 = v4 & 0xFFFFFFFFFFFFFFFLL;
    v8 = 48 * v4;
    v9 = (_QWORD *)(v5 + 8);
    while ( v8 )
    {
      if ( !*v9 || !(*(unsigned __int8 (__fastcall **)(__int64, _QWORD))(v20 + 24))(v19, *(v9 - 1)) )
      {
        v10 = sub_7FF6EBBA253E(v6, v7, v3 + 16);
        v11 = sub_7FF6EBBA253E(v6, v7, v3);
        v12 = 16LL * *(_QWORD *)(v3 + 32);
        LODWORD(v21) = *(_DWORD *)(v3 + 40);
        WORD2(v21) = v10;
        HIWORD(v21) = v11;
        v8 -= 48LL;
        v9 += 2;
        v3 += 48LL;
        if ( !(*(unsigned __int8 (__fastcall **)(_QWORD, __int64 *))(v6 + v12 + 8))(*(_QWORD *)(v6 + v12), &v19) )
          continue;
      }
      return 1;
    }
    v14 = v23;
  }
  else
  {
    v13 = a3[2];
    v14 = a3[3];
    v5 = *a3;
    v22 = a3[1];
    v15 = 0LL;
    while ( 16 * v14 != v15 )
    {
      if ( !*(_QWORD *)(v5 + v15 + 8)
        || !(*(unsigned __int8 (__fastcall **)(__int64, _QWORD))(v20 + 24))(v19, *(_QWORD *)(v5 + v15)) )
      {
        v16 = (*(__int64 (__fastcall **)(_QWORD, __int64 *))(v13 + 8))(*(_QWORD *)v13, &v19);
        v15 += 16LL;
        v13 += 16LL;
        if ( !v16 )
          continue;
      }
      return 1;
    }
  }
  if ( v14 >= v22 )
    return 0;
  v18 = (*(__int64 (__fastcall **)(__int64, _QWORD, _QWORD))(v20 + 24))(
          v19,
          *(_QWORD *)(v5 + 16 * v14),
          *(_QWORD *)(v5 + 16 * v14 + 8));
  result = 1;
  if ( !v18 )
    return 0;
  return result;
}